/*
Deployment script for whiskeyball-db-prod

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "whiskeyball-db-prod"
:setvar DefaultFilePrefix "whiskeyball-db-prod"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
/*
The column [wb].[measurements].[active] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [wb].[measurements])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [wb].[rule_conditions].[measurement_id] is being dropped, data loss could occur.

The column [wb].[rule_conditions].[segment_id] is being dropped, data loss could occur.

The column [wb].[rule_conditions].[measurement_apcode] on table [wb].[rule_conditions] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column [wb].[rule_conditions].[segment_apcode] on table [wb].[rule_conditions] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.

The column modified_on on table [wb].[rule_conditions] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [wb].[rule_conditions])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [wb].[segments].[active] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [wb].[segments])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The column [wb].[warnings].[received_on] is being dropped, data loss could occur.

The column [wb].[warnings].[UPDATED_ON] is being dropped, data loss could occur.

The column [wb].[warnings].[storm_id] on table [wb].[warnings] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [wb].[warnings])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping unnamed constraint on [wb].[warnings]...';


GO
ALTER TABLE [wb].[warnings] DROP CONSTRAINT [DF__warnings__UPDATE__07C12930];


GO
PRINT N'Dropping unnamed constraint on [wb].[measurements]...';


GO
ALTER TABLE [wb].[measurements] DROP CONSTRAINT [DF__measureme__activ__02084FDA];


GO
PRINT N'Dropping unnamed constraint on [wb].[segments]...';


GO
ALTER TABLE [wb].[segments] DROP CONSTRAINT [DF__segments__active__04E4BC85];


GO
PRINT N'Dropping unnamed constraint on [wb].[rule_conditions]...';


GO
ALTER TABLE [wb].[rule_conditions] DROP CONSTRAINT [FK__rule_cond__measu__0A9D95DB];


GO
PRINT N'Dropping unnamed constraint on [wb].[rule_conditions]...';


GO
ALTER TABLE [wb].[rule_conditions] DROP CONSTRAINT [FK__rule_cond__segme__0B91BA14];


GO
PRINT N'Dropping [wb].[fk_rule_conditions_rule_id]...';


GO
ALTER TABLE [wb].[rule_conditions] DROP CONSTRAINT [fk_rule_conditions_rule_id];


GO
PRINT N'Dropping unnamed constraint on [wb].[rule_conditions]...';


GO
ALTER TABLE [wb].[rule_conditions] DROP CONSTRAINT [FK__rule_cond__measu__2EDAF651];


GO
PRINT N'Dropping unnamed constraint on [wb].[rule_conditions]...';


GO
ALTER TABLE [wb].[rule_conditions] DROP CONSTRAINT [FK__rule_cond__segme__2FCF1A8A];


GO
PRINT N'Creating [curated]...';


GO
CREATE SCHEMA [curated]
    AUTHORIZATION [dbo];


GO
PRINT N'Altering [wb].[lsbp_email_recipients]...';


GO
ALTER TABLE [wb].[lsbp_email_recipients]
    ADD [RowV] ROWVERSION NOT NULL;


GO
PRINT N'Altering [wb].[measurements]...';


GO
ALTER TABLE [wb].[measurements] DROP COLUMN [active];


GO
ALTER TABLE [wb].[measurements]
    ADD [RowV] ROWVERSION NOT NULL;


GO
PRINT N'Starting rebuilding table [wb].[rule_conditions]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [wb].[tmp_ms_xx_rule_conditions] (
    [id]                      INT           IDENTITY (1, 1) NOT NULL,
    [rule_id]                 INT           NOT NULL,
    [operator]                VARCHAR (30)  NOT NULL,
    [segment_apcode]          VARCHAR (255) NOT NULL,
    [measurement_apcode]      VARCHAR (255) NOT NULL,
    [measurement_name]        VARCHAR (255) NOT NULL,
    [measurement_calc_period] VARCHAR (30)  NULL,
    [measurement_unit]        VARCHAR (30)  NULL,
    [measurement_value]       FLOAT (53)    NOT NULL,
    [aggregation]             VARCHAR (10)  NOT NULL,
    [modified_on]             DATETIME      NOT NULL,
    [modified_by]             VARCHAR (255) NULL,
    [RowV]                    ROWVERSION    NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_pk_rule_conditions1] PRIMARY KEY CLUSTERED ([id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [wb].[rule_conditions])
    BEGIN
        SET IDENTITY_INSERT [wb].[tmp_ms_xx_rule_conditions] ON;
        INSERT INTO [wb].[tmp_ms_xx_rule_conditions] ([id], [rule_id], [operator], [measurement_value], [modified_on], [modified_by], [measurement_name], [measurement_calc_period], [measurement_unit], [aggregation])
        SELECT   [id],
                 [rule_id],
                 [operator],
                 [measurement_value],
                 [modified_on],
                 [modified_by],
                 [measurement_name],
                 [measurement_calc_period],
                 [measurement_unit],
                 [aggregation]
        FROM     [wb].[rule_conditions]
        ORDER BY [id] ASC;
        SET IDENTITY_INSERT [wb].[tmp_ms_xx_rule_conditions] OFF;
    END

DROP TABLE [wb].[rule_conditions];

EXECUTE sp_rename N'[wb].[tmp_ms_xx_rule_conditions]', N'rule_conditions';

EXECUTE sp_rename N'[wb].[tmp_ms_xx_constraint_pk_rule_conditions1]', N'pk_rule_conditions', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [wb].[rules]...';


GO
ALTER TABLE [wb].[rules]
    ADD [RowV] ROWVERSION NOT NULL;


GO
PRINT N'Altering [wb].[segments]...';


GO
ALTER TABLE [wb].[segments] DROP COLUMN [active];


GO
ALTER TABLE [wb].[segments]
    ADD [RowV] ROWVERSION NOT NULL;


GO
PRINT N'Altering [wb].[site_manufacturer]...';


GO
ALTER TABLE [wb].[site_manufacturer]
    ADD [RowV] ROWVERSION NOT NULL;


GO
PRINT N'Altering [wb].[site_operator]...';


GO
ALTER TABLE [wb].[site_operator]
    ADD [RowV] ROWVERSION NOT NULL;


GO
PRINT N'Altering [wb].[site_stow_options]...';


GO
ALTER TABLE [wb].[site_stow_options]
    ADD [RowV] ROWVERSION NOT NULL;


GO
PRINT N'Altering [wb].[warnings]...';


GO
ALTER TABLE [wb].[warnings] DROP COLUMN [received_on], COLUMN [UPDATED_ON];


GO
ALTER TABLE [wb].[warnings] ALTER COLUMN [data] NVARCHAR (MAX) NOT NULL;


GO
ALTER TABLE [wb].[warnings]
    ADD [modified_on] DATETIME      DEFAULT (getdate()) NULL,
        [RowV]        ROWVERSION    NOT NULL,
        [storm_id]    VARCHAR (255) NOT NULL;


GO
PRINT N'Creating [wb].[lsbp_email_recipients_history]...';


GO
CREATE TABLE [wb].[lsbp_email_recipients_history] (
    [id]          INT           NOT NULL,
    [site_id]     VARCHAR (255) NOT NULL,
    [email]       VARCHAR (255) NOT NULL,
    [modified_by] VARCHAR (255) NULL,
    [from]        DATETIME      NOT NULL,
    [to]          DATETIME      NULL
);


GO
PRINT N'Creating [wb].[rule_conditions_history]...';


GO
CREATE TABLE [wb].[rule_conditions_history] (
    [id]                      INT           NOT NULL,
    [rule_id]                 INT           NOT NULL,
    [operator]                VARCHAR (30)  NOT NULL,
    [segment_apcode]          VARCHAR (255) NOT NULL,
    [measurement_apcode]      VARCHAR (255) NOT NULL,
    [measurement_name]        VARCHAR (255) NOT NULL,
    [measurement_calc_period] VARCHAR (30)  NULL,
    [measurement_unit]        VARCHAR (30)  NULL,
    [measurement_value]       FLOAT (53)    NOT NULL,
    [aggregation]             VARCHAR (10)  NOT NULL,
    [modified_by]             VARCHAR (255) NULL,
    [from]                    DATETIME      NOT NULL,
    [to]                      DATETIME      NULL
);


GO
PRINT N'Creating [wb].[site_manufacturer_history]...';


GO
CREATE TABLE [wb].[site_manufacturer_history] (
    [site_id]              VARCHAR (255) NOT NULL,
    [site_name]            VARCHAR (255) NULL,
    [panel_manufacturer]   VARCHAR (255) NOT NULL,
    [tracker_manufacturer] VARCHAR (255) NOT NULL,
    [modified_by]          VARCHAR (255) NULL,
    [active]               BIT           NULL,
    [from]                 DATETIME      NOT NULL,
    [to]                   DATETIME      NULL
);


GO
PRINT N'Creating [wb].[site_operator_history]...';


GO
CREATE TABLE [wb].[site_operator_history] (
    [id]             INT           NOT NULL,
    [site_id]        VARCHAR (255) NOT NULL,
    [operator_name]  VARCHAR (255) NULL,
    [operator_email] VARCHAR (255) NOT NULL,
    [modified_by]    VARCHAR (255) NULL,
    [operator_tz]    VARCHAR (100) NULL,
    [from]           DATETIME      NOT NULL,
    [to]             DATETIME      NULL
);


GO
PRINT N'Creating [wb].[site_stow_options_history]...';


GO
CREATE TABLE [wb].[site_stow_options_history] (
    [id]             INT           NOT NULL,
    [site_id]        VARCHAR (255) NOT NULL,
    [stow_option]    VARCHAR (255) NOT NULL,
    [modified_by]    VARCHAR (255) NULL,
    [is_auto_option] BIT           NOT NULL,
    [from]           DATETIME      NOT NULL,
    [to]             DATETIME      NULL
);


GO
PRINT N'Creating [wb].[fk_rule_conditions_rule_id]...';


GO
ALTER TABLE [wb].[rule_conditions] WITH NOCHECK
    ADD CONSTRAINT [fk_rule_conditions_rule_id] FOREIGN KEY ([rule_id]) REFERENCES [wb].[rules] ([id]);


GO
PRINT N'Refreshing [wb].[insolar_filtered_segments_view]...';


GO
EXECUTE sp_refreshsqlmodule N'[wb].[insolar_filtered_segments_view]';


GO
PRINT N'Refreshing [wb].[measurements_view]...';


GO
EXECUTE sp_refreshsqlmodule N'[wb].[measurements_view]';


GO
PRINT N'Creating [wb].[active_rules]...';


GO
CREATE view [wb].[active_rules] as
select r.* 
from wb.rules r join
	wb.site_manufacturer sm on
		r.site_id=sm.site_id and
		r.active = 1 and
		sm.active = 1;
GO
PRINT N'Creating [wb].[active_sites]...';


GO
create view  [wb].[active_sites] as
select * from wb.site_manufacturer where active=1;
GO
PRINT N'Refreshing [wb].[insolar_filtered_measurements_view]...';


GO
EXECUTE sp_refreshsqlmodule N'[wb].[insolar_filtered_measurements_view]';


GO
PRINT N'Altering [wb].[rules_view]...';


GO
ALTER view [wb].[rules_view] as
 select 
	r.id,
	r.rule_name,
	r.rule_description,
	r.rule_type,
	r.site_id,
	sm.site_name,
	rc.segment_apcode,
	rc.measurement_apcode as parameter_apcode,
	rc.measurement_name,
	rc.measurement_calc_period,
	seg_nms.segment_names,
	rc.operator,
	rc.measurement_value,
	rc.aggregation,
	r.action_if_true
from wb.active_rules r inner join 
 wb.rule_conditions rc on r.id = rc.rule_id join
 wb.active_sites sm on r.site_id = sm.site_id join
 (select site_id,segment_apcode, string_agg(segment_name,',') as segment_names
				from [wb].[insolar_filtered_segments_view] 
				group by site_id,segment_apcode) seg_nms on seg_nms.site_id = r.site_id
					and rc.segment_apcode = seg_nms.segment_apcode	
	where r.all_clear = 0
GO
PRINT N'Altering [wb].[segments_view]...';


GO
ALTER view  [wb].[segments_view] as
select '' as site_id,' Select' as segment_apcode, 0 as id from wb.active_sites
union
select site_id ,' Select' as segment_apcode, 0 as id from  wb.active_sites
union
select site_id, segment_apcode, id from wb.segments;
GO
PRINT N'Creating [dbo].[fn_diagramobjects]...';


GO
CREATE FUNCTION [dbo].[fn_diagramobjects]() 
	RETURNS int
	WITH EXECUTE AS N'dbo'
	AS
	BEGIN
		declare @id_upgraddiagrams		int
		declare @id_sysdiagrams			int
		declare @id_helpdiagrams		int
		declare @id_helpdiagramdefinition	int
		declare @id_creatediagram	int
		declare @id_renamediagram	int
		declare @id_alterdiagram 	int 
		declare @id_dropdiagram		int
		declare @InstalledObjects	int

		select @InstalledObjects = 0

		select 	@id_upgraddiagrams = object_id(N'dbo.sp_upgraddiagrams'),
			@id_sysdiagrams = object_id(N'dbo.sysdiagrams'),
			@id_helpdiagrams = object_id(N'dbo.sp_helpdiagrams'),
			@id_helpdiagramdefinition = object_id(N'dbo.sp_helpdiagramdefinition'),
			@id_creatediagram = object_id(N'dbo.sp_creatediagram'),
			@id_renamediagram = object_id(N'dbo.sp_renamediagram'),
			@id_alterdiagram = object_id(N'dbo.sp_alterdiagram'), 
			@id_dropdiagram = object_id(N'dbo.sp_dropdiagram')

		if @id_upgraddiagrams is not null
			select @InstalledObjects = @InstalledObjects + 1
		if @id_sysdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 2
		if @id_helpdiagrams is not null
			select @InstalledObjects = @InstalledObjects + 4
		if @id_helpdiagramdefinition is not null
			select @InstalledObjects = @InstalledObjects + 8
		if @id_creatediagram is not null
			select @InstalledObjects = @InstalledObjects + 16
		if @id_renamediagram is not null
			select @InstalledObjects = @InstalledObjects + 32
		if @id_alterdiagram  is not null
			select @InstalledObjects = @InstalledObjects + 64
		if @id_dropdiagram is not null
			select @InstalledObjects = @InstalledObjects + 128
		
		return @InstalledObjects 
	END
GO
PRINT N'Creating [dbo].[Testing]...';


GO

CREATE PROCEDURE Testing
    @LastName nvarchar(50),   
    @FirstName nvarchar(50)   
AS
GO
